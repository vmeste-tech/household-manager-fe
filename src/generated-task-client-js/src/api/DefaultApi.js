/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ChangeStatusResponse from '../model/ChangeStatusResponse';
import CreateTaskRequest from '../model/CreateTaskRequest';
import TaskDto from '../model/TaskDto';

/**
*  service.
* @module api/DefaultApi
* @version v0
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the changeStatus operation.
     * @callback module:api/DefaultApi~changeStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ChangeStatusResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Изменение статуса задачи
     * Позволяет создать задачу
     * @param {String} taskId 
     * @param {module:model/String} status 
     * @param {module:api/DefaultApi~changeStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ChangeStatusResponse}
     */
    changeStatus(taskId, status, callback) {
      let postBody = null;
      // verify the required parameter 'taskId' is set
      if (taskId === undefined || taskId === null) {
        throw new Error("Missing the required parameter 'taskId' when calling changeStatus");
      }
      // verify the required parameter 'status' is set
      if (status === undefined || status === null) {
        throw new Error("Missing the required parameter 'status' when calling changeStatus");
      }

      let pathParams = {
        'taskId': taskId
      };
      let queryParams = {
        'status': status
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = ChangeStatusResponse;
      return this.apiClient.callApi(
        '/api/v1/tasks/{taskId}/status', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the create operation.
     * @callback module:api/DefaultApi~createCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TaskDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Создание задачи
     * Позволяет создать задачу
     * @param {module:model/CreateTaskRequest} createTaskRequest 
     * @param {module:api/DefaultApi~createCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TaskDto}
     */
    create(createTaskRequest, callback) {
      let postBody = createTaskRequest;
      // verify the required parameter 'createTaskRequest' is set
      if (createTaskRequest === undefined || createTaskRequest === null) {
        throw new Error("Missing the required parameter 'createTaskRequest' when calling create");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = TaskDto;
      return this.apiClient.callApi(
        '/api/v1/tasks', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteTask operation.
     * @callback module:api/DefaultApi~deleteTaskCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Удаление задачи
     * Позволяет удалить задачу
     * @param {String} taskId 
     * @param {module:api/DefaultApi~deleteTaskCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteTask(taskId, callback) {
      let postBody = null;
      // verify the required parameter 'taskId' is set
      if (taskId === undefined || taskId === null) {
        throw new Error("Missing the required parameter 'taskId' when calling deleteTask");
      }

      let pathParams = {
        'taskId': taskId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1/tasks/{taskId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTasks operation.
     * @callback module:api/DefaultApi~getTasksCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TaskDto>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Получение списка задач
     * Позволяет получить задачи исходя из текущих статусов правил и проживающих
     * @param {String} apartmentId 
     * @param {Date} startDate 
     * @param {Date} endDate 
     * @param {module:api/DefaultApi~getTasksCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TaskDto>}
     */
    getTasks(apartmentId, startDate, endDate, callback) {
      let postBody = null;
      // verify the required parameter 'apartmentId' is set
      if (apartmentId === undefined || apartmentId === null) {
        throw new Error("Missing the required parameter 'apartmentId' when calling getTasks");
      }
      // verify the required parameter 'startDate' is set
      if (startDate === undefined || startDate === null) {
        throw new Error("Missing the required parameter 'startDate' when calling getTasks");
      }
      // verify the required parameter 'endDate' is set
      if (endDate === undefined || endDate === null) {
        throw new Error("Missing the required parameter 'endDate' when calling getTasks");
      }

      let pathParams = {
        'apartmentId': apartmentId
      };
      let queryParams = {
        'startDate': startDate,
        'endDate': endDate
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [TaskDto];
      return this.apiClient.callApi(
        '/api/v1/tasks/{apartmentId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
