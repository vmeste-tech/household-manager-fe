/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The TaskDto model module.
 * @module model/TaskDto
 * @version v0
 */
class TaskDto {
    /**
     * Constructs a new <code>TaskDto</code>.
     * @alias module:model/TaskDto
     */
    constructor() { 
        
        TaskDto.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>TaskDto</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TaskDto} obj Optional instance to populate.
     * @return {module:model/TaskDto} The populated <code>TaskDto</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TaskDto();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('scheduledAt')) {
                obj['scheduledAt'] = ApiClient.convertToType(data['scheduledAt'], 'Date');
            }
            if (data.hasOwnProperty('apartmentId')) {
                obj['apartmentId'] = ApiClient.convertToType(data['apartmentId'], 'String');
            }
            if (data.hasOwnProperty('assignedTo')) {
                obj['assignedTo'] = ApiClient.convertToType(data['assignedTo'], 'String');
            }
            if (data.hasOwnProperty('ruleId')) {
                obj['ruleId'] = ApiClient.convertToType(data['ruleId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TaskDto</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TaskDto</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // ensure the json data is a string
        if (data['apartmentId'] && !(typeof data['apartmentId'] === 'string' || data['apartmentId'] instanceof String)) {
            throw new Error("Expected the field `apartmentId` to be a primitive type in the JSON string but got " + data['apartmentId']);
        }
        // ensure the json data is a string
        if (data['assignedTo'] && !(typeof data['assignedTo'] === 'string' || data['assignedTo'] instanceof String)) {
            throw new Error("Expected the field `assignedTo` to be a primitive type in the JSON string but got " + data['assignedTo']);
        }
        // ensure the json data is a string
        if (data['ruleId'] && !(typeof data['ruleId'] === 'string' || data['ruleId'] instanceof String)) {
            throw new Error("Expected the field `ruleId` to be a primitive type in the JSON string but got " + data['ruleId']);
        }

        return true;
    }


}



/**
 * @member {String} id
 */
TaskDto.prototype['id'] = undefined;

/**
 * @member {String} title
 */
TaskDto.prototype['title'] = undefined;

/**
 * @member {String} description
 */
TaskDto.prototype['description'] = undefined;

/**
 * @member {module:model/TaskDto.StatusEnum} status
 */
TaskDto.prototype['status'] = undefined;

/**
 * @member {Date} scheduledAt
 */
TaskDto.prototype['scheduledAt'] = undefined;

/**
 * @member {String} apartmentId
 */
TaskDto.prototype['apartmentId'] = undefined;

/**
 * @member {String} assignedTo
 */
TaskDto.prototype['assignedTo'] = undefined;

/**
 * @member {String} ruleId
 */
TaskDto.prototype['ruleId'] = undefined;





/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
TaskDto['StatusEnum'] = {

    /**
     * value: "CREATED"
     * @const
     */
    "CREATED": "CREATED",

    /**
     * value: "IN_PROGRESS"
     * @const
     */
    "IN_PROGRESS": "IN_PROGRESS",

    /**
     * value: "COMPLETED"
     * @const
     */
    "COMPLETED": "COMPLETED",

    /**
     * value: "CANCELED"
     * @const
     */
    "CANCELED": "CANCELED"
};



export default TaskDto;

