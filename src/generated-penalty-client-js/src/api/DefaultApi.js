/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreatePenaltyRequest from '../model/CreatePenaltyRequest';
import PenaltyDto from '../model/PenaltyDto';
import PenaltyResponse from '../model/PenaltyResponse';
import Response from '../model/Response';

/**
*  service.
* @module api/DefaultApi
* @version v0
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the changeStatus operation.
     * @callback module:api/DefaultApi~changeStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PenaltyDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Изменение статуса штрафа
     * Позволяет изменить статус штрафа по идентификатору
     * @param {String} penaltyId 
     * @param {module:model/String} status 
     * @param {module:api/DefaultApi~changeStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PenaltyDto}
     */
    changeStatus(penaltyId, status, callback) {
      let postBody = null;
      // verify the required parameter 'penaltyId' is set
      if (penaltyId === undefined || penaltyId === null) {
        throw new Error("Missing the required parameter 'penaltyId' when calling changeStatus");
      }
      // verify the required parameter 'status' is set
      if (status === undefined || status === null) {
        throw new Error("Missing the required parameter 'status' when calling changeStatus");
      }

      let pathParams = {
        'penaltyId': penaltyId
      };
      let queryParams = {
        'status': status
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = PenaltyDto;
      return this.apiClient.callApi(
        '/api/v1/penalties/{penaltyId}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createPenalty operation.
     * @callback module:api/DefaultApi~createPenaltyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PenaltyDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Создание штрафа
     * Позволяет создать новый штраф
     * @param {module:model/CreatePenaltyRequest} createPenaltyRequest 
     * @param {module:api/DefaultApi~createPenaltyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PenaltyDto}
     */
    createPenalty(createPenaltyRequest, callback) {
      let postBody = createPenaltyRequest;
      // verify the required parameter 'createPenaltyRequest' is set
      if (createPenaltyRequest === undefined || createPenaltyRequest === null) {
        throw new Error("Missing the required parameter 'createPenaltyRequest' when calling createPenalty");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = PenaltyDto;
      return this.apiClient.callApi(
        '/api/v1/penalties', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deletePenalty operation.
     * @callback module:api/DefaultApi~deletePenaltyCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Удаление штрафа
     * Позволяет удалить штраф по идентификатору
     * @param {String} penaltyId 
     * @param {module:api/DefaultApi~deletePenaltyCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deletePenalty(penaltyId, callback) {
      let postBody = null;
      // verify the required parameter 'penaltyId' is set
      if (penaltyId === undefined || penaltyId === null) {
        throw new Error("Missing the required parameter 'penaltyId' when calling deletePenalty");
      }

      let pathParams = {
        'penaltyId': penaltyId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1/penalties/{penaltyId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getApartmentPenalties operation.
     * @callback module:api/DefaultApi~getApartmentPenaltiesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PenaltyResponse>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Получение штрафов по квартире
     * Позволяет получить все штрафы по идентификатору квартиры за указанный период
     * @param {String} apartmentId 
     * @param {Object} opts Optional parameters
     * @param {Date} [startDate] 
     * @param {Date} [endDate] 
     * @param {module:api/DefaultApi~getApartmentPenaltiesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PenaltyResponse>}
     */
    getApartmentPenalties(apartmentId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apartmentId' is set
      if (apartmentId === undefined || apartmentId === null) {
        throw new Error("Missing the required parameter 'apartmentId' when calling getApartmentPenalties");
      }

      let pathParams = {
        'apartmentId': apartmentId
      };
      let queryParams = {
        'startDate': opts['startDate'],
        'endDate': opts['endDate']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [PenaltyResponse];
      return this.apiClient.callApi(
        '/api/v1/penalties/{apartmentId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
