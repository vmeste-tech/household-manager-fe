/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AddToApartmentResponse from '../model/AddToApartmentResponse';
import ApartmentInfo from '../model/ApartmentInfo';
import AuthRequest from '../model/AuthRequest';
import ChangePasswordRequest from '../model/ChangePasswordRequest';
import CreateApartmentRequest from '../model/CreateApartmentRequest';
import CreateApartmentResponse from '../model/CreateApartmentResponse';
import CreateInviteCodeRequest from '../model/CreateInviteCodeRequest';
import GetApartmentResponse from '../model/GetApartmentResponse';
import GetUserResponse from '../model/GetUserResponse';
import InviteCodeDto from '../model/InviteCodeDto';
import RefreshTokenRequest from '../model/RefreshTokenRequest';
import Response from '../model/Response';
import TokenResponse from '../model/TokenResponse';
import UpdateApartmentRequest from '../model/UpdateApartmentRequest';
import UpdateApartmentResponse from '../model/UpdateApartmentResponse';
import UpdateUserProfileRequest from '../model/UpdateUserProfileRequest';
import UseInviteCodeRequest from '../model/UseInviteCodeRequest';
import UserRegistrationRequest from '../model/UserRegistrationRequest';
import UserResponse from '../model/UserResponse';

/**
*  service.
* @module api/DefaultApi
* @version v0
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the addToApartment operation.
     * @callback module:api/DefaultApi~addToApartmentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AddToApartmentResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Добавление пользователя в квартиру
     * Позволяет добавить пользователя в квартиру по идентификатору
     * @param {String} apartmentId 
     * @param {String} userId 
     * @param {module:api/DefaultApi~addToApartmentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AddToApartmentResponse}
     */
    addToApartment(apartmentId, userId, callback) {
      let postBody = null;
      // verify the required parameter 'apartmentId' is set
      if (apartmentId === undefined || apartmentId === null) {
        throw new Error("Missing the required parameter 'apartmentId' when calling addToApartment");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling addToApartment");
      }

      let pathParams = {
        'apartmentId': apartmentId,
        'userId': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = AddToApartmentResponse;
      return this.apiClient.callApi(
        '/api/v1/apartments/{apartmentId}/users/{userId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the changePassword operation.
     * @callback module:api/DefaultApi~changePasswordCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Обновление пароля
     * Позволяет обновить пароль пользователя
     * @param {module:model/ChangePasswordRequest} changePasswordRequest 
     * @param {module:api/DefaultApi~changePasswordCallback} callback The callback function, accepting three arguments: error, data, response
     */
    changePassword(changePasswordRequest, callback) {
      let postBody = changePasswordRequest;
      // verify the required parameter 'changePasswordRequest' is set
      if (changePasswordRequest === undefined || changePasswordRequest === null) {
        throw new Error("Missing the required parameter 'changePasswordRequest' when calling changePassword");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1/users/password', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createApartment operation.
     * @callback module:api/DefaultApi~createApartmentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateApartmentResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Создание квартиры
     * Позволяет создать квартиру
     * @param {module:model/CreateApartmentRequest} createApartmentRequest 
     * @param {module:api/DefaultApi~createApartmentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateApartmentResponse}
     */
    createApartment(createApartmentRequest, callback) {
      let postBody = createApartmentRequest;
      // verify the required parameter 'createApartmentRequest' is set
      if (createApartmentRequest === undefined || createApartmentRequest === null) {
        throw new Error("Missing the required parameter 'createApartmentRequest' when calling createApartment");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = CreateApartmentResponse;
      return this.apiClient.callApi(
        '/api/v1/apartments', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createInviteCode operation.
     * @callback module:api/DefaultApi~createInviteCodeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InviteCodeDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Создание приглашения
     * Позволяет создать приглашение для добавления нового соседа
     * @param {module:model/CreateInviteCodeRequest} createInviteCodeRequest 
     * @param {module:api/DefaultApi~createInviteCodeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InviteCodeDto}
     */
    createInviteCode(createInviteCodeRequest, callback) {
      let postBody = createInviteCodeRequest;
      // verify the required parameter 'createInviteCodeRequest' is set
      if (createInviteCodeRequest === undefined || createInviteCodeRequest === null) {
        throw new Error("Missing the required parameter 'createInviteCodeRequest' when calling createInviteCode");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = InviteCodeDto;
      return this.apiClient.callApi(
        '/api/v1/invite/create', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteApartment operation.
     * @callback module:api/DefaultApi~deleteApartmentCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Удаление квартиры
     * Позволяет удалить квартиру
     * @param {String} apartmentId 
     * @param {module:api/DefaultApi~deleteApartmentCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteApartment(apartmentId, callback) {
      let postBody = null;
      // verify the required parameter 'apartmentId' is set
      if (apartmentId === undefined || apartmentId === null) {
        throw new Error("Missing the required parameter 'apartmentId' when calling deleteApartment");
      }

      let pathParams = {
        'apartmentId': apartmentId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1/apartments/{apartmentId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteFromApartment operation.
     * @callback module:api/DefaultApi~deleteFromApartmentCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Удаление пользователя из квартиры
     * Позволяет удалить пользователя из квартиры
     * @param {String} apartmentId 
     * @param {String} userId 
     * @param {module:api/DefaultApi~deleteFromApartmentCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteFromApartment(apartmentId, userId, callback) {
      let postBody = null;
      // verify the required parameter 'apartmentId' is set
      if (apartmentId === undefined || apartmentId === null) {
        throw new Error("Missing the required parameter 'apartmentId' when calling deleteFromApartment");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling deleteFromApartment");
      }

      let pathParams = {
        'apartmentId': apartmentId,
        'userId': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1/apartments/{apartmentId}/users/{userId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteUser operation.
     * @callback module:api/DefaultApi~deleteUserCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} userId 
     * @param {module:api/DefaultApi~deleteUserCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteUser(userId, callback) {
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling deleteUser");
      }

      let pathParams = {
        'userId': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1/users/{userId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the findApartmentByUser operation.
     * @callback module:api/DefaultApi~findApartmentByUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApartmentInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Получение квартиры по JWT токену пользователя
     * Позволяет получить квартиру по JWT токену пользователя
     * @param {module:api/DefaultApi~findApartmentByUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApartmentInfo}
     */
    findApartmentByUser(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = ApartmentInfo;
      return this.apiClient.callApi(
        '/api/v1/apartments/by-user', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getApartment operation.
     * @callback module:api/DefaultApi~getApartmentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetApartmentResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Получение квартиры по идентификатору
     * Позволяет получить квартиру идентификатору
     * @param {String} apartmentId 
     * @param {module:api/DefaultApi~getApartmentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetApartmentResponse}
     */
    getApartment(apartmentId, callback) {
      let postBody = null;
      // verify the required parameter 'apartmentId' is set
      if (apartmentId === undefined || apartmentId === null) {
        throw new Error("Missing the required parameter 'apartmentId' when calling getApartment");
      }

      let pathParams = {
        'apartmentId': apartmentId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = GetApartmentResponse;
      return this.apiClient.callApi(
        '/api/v1/apartments/{apartmentId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getApartmentUsers operation.
     * @callback module:api/DefaultApi~getApartmentUsersCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetUserResponse>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Получение пользователей, проживающих в квартире
     * Позволяет получить пользователей, проживающих в квартире
     * @param {String} apartmentId 
     * @param {module:api/DefaultApi~getApartmentUsersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetUserResponse>}
     */
    getApartmentUsers(apartmentId, callback) {
      let postBody = null;
      // verify the required parameter 'apartmentId' is set
      if (apartmentId === undefined || apartmentId === null) {
        throw new Error("Missing the required parameter 'apartmentId' when calling getApartmentUsers");
      }

      let pathParams = {
        'apartmentId': apartmentId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [GetUserResponse];
      return this.apiClient.callApi(
        '/api/v1/apartments/{apartmentId}/users', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getUser operation.
     * @callback module:api/DefaultApi~getUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetUserResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Получение информации о пользователе по JWT токену
     * Позволяет получить информацию о пользователе по JWT токену
     * @param {module:api/DefaultApi~getUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetUserResponse}
     */
    getUser(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = GetUserResponse;
      return this.apiClient.callApi(
        '/api/v1/users/me', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the login operation.
     * @callback module:api/DefaultApi~loginCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TokenResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Получение JWT токена
     * Позволяет получить JWT токен для доступа к защищенным ресурсам
     * @param {module:model/AuthRequest} authRequest 
     * @param {module:api/DefaultApi~loginCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TokenResponse}
     */
    login(authRequest, callback) {
      let postBody = authRequest;
      // verify the required parameter 'authRequest' is set
      if (authRequest === undefined || authRequest === null) {
        throw new Error("Missing the required parameter 'authRequest' when calling login");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = TokenResponse;
      return this.apiClient.callApi(
        '/api/v1/auth/login', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the refreshToken operation.
     * @callback module:api/DefaultApi~refreshTokenCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TokenResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Обновление JWT токена
     * Позволяет обновить JWT токен для доступа к защищенным ресурсам
     * @param {module:model/RefreshTokenRequest} refreshTokenRequest 
     * @param {module:api/DefaultApi~refreshTokenCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TokenResponse}
     */
    refreshToken(refreshTokenRequest, callback) {
      let postBody = refreshTokenRequest;
      // verify the required parameter 'refreshTokenRequest' is set
      if (refreshTokenRequest === undefined || refreshTokenRequest === null) {
        throw new Error("Missing the required parameter 'refreshTokenRequest' when calling refreshToken");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = TokenResponse;
      return this.apiClient.callApi(
        '/api/v1/auth/refresh', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the register operation.
     * @callback module:api/DefaultApi~registerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Регистрация пользователя
     * Позволяет зарегистрировать пользователя в системе
     * @param {module:model/UserRegistrationRequest} userRegistrationRequest 
     * @param {module:api/DefaultApi~registerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserResponse}
     */
    register(userRegistrationRequest, callback) {
      let postBody = userRegistrationRequest;
      // verify the required parameter 'userRegistrationRequest' is set
      if (userRegistrationRequest === undefined || userRegistrationRequest === null) {
        throw new Error("Missing the required parameter 'userRegistrationRequest' when calling register");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = UserResponse;
      return this.apiClient.callApi(
        '/api/v1/users/register', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateApartment operation.
     * @callback module:api/DefaultApi~updateApartmentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateApartmentResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Обновление квартиры
     * Позволяет обновить квартиру
     * @param {String} apartmentId 
     * @param {module:model/UpdateApartmentRequest} updateApartmentRequest 
     * @param {module:api/DefaultApi~updateApartmentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateApartmentResponse}
     */
    updateApartment(apartmentId, updateApartmentRequest, callback) {
      let postBody = updateApartmentRequest;
      // verify the required parameter 'apartmentId' is set
      if (apartmentId === undefined || apartmentId === null) {
        throw new Error("Missing the required parameter 'apartmentId' when calling updateApartment");
      }
      // verify the required parameter 'updateApartmentRequest' is set
      if (updateApartmentRequest === undefined || updateApartmentRequest === null) {
        throw new Error("Missing the required parameter 'updateApartmentRequest' when calling updateApartment");
      }

      let pathParams = {
        'apartmentId': apartmentId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = UpdateApartmentResponse;
      return this.apiClient.callApi(
        '/api/v1/apartments/{apartmentId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateProfile operation.
     * @callback module:api/DefaultApi~updateProfileCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetUserResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Обновление профиля пользователя
     * Позволяет обновить имя, фамилию, почту и фото профиля пользователя (фото в формате base64)
     * @param {module:model/UpdateUserProfileRequest} updateUserProfileRequest 
     * @param {module:api/DefaultApi~updateProfileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetUserResponse}
     */
    updateProfile(updateUserProfileRequest, callback) {
      let postBody = updateUserProfileRequest;
      // verify the required parameter 'updateUserProfileRequest' is set
      if (updateUserProfileRequest === undefined || updateUserProfileRequest === null) {
        throw new Error("Missing the required parameter 'updateUserProfileRequest' when calling updateProfile");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = GetUserResponse;
      return this.apiClient.callApi(
        '/api/v1/users/profile', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the useInviteCode operation.
     * @callback module:api/DefaultApi~useInviteCodeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApartmentInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Использование приглашения
     * Позволяет использовать приглашение вступления в квартиру
     * @param {module:model/UseInviteCodeRequest} useInviteCodeRequest 
     * @param {module:api/DefaultApi~useInviteCodeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApartmentInfo}
     */
    useInviteCode(useInviteCodeRequest, callback) {
      let postBody = useInviteCodeRequest;
      // verify the required parameter 'useInviteCodeRequest' is set
      if (useInviteCodeRequest === undefined || useInviteCodeRequest === null) {
        throw new Error("Missing the required parameter 'useInviteCodeRequest' when calling useInviteCode");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = ApartmentInfo;
      return this.apiClient.callApi(
        '/api/v1/invite/use', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
