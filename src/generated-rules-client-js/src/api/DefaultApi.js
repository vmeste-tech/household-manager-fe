/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreateRuleRequest from '../model/CreateRuleRequest';
import RuleDto from '../model/RuleDto';
import UpdateRuleRequest from '../model/UpdateRuleRequest';

/**
*  service.
* @module api/DefaultApi
* @version v0
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createRule operation.
     * @callback module:api/DefaultApi~createRuleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RuleDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Создание правила
     * Позволяет создать новое правило
     * @param {module:model/CreateRuleRequest} createRuleRequest 
     * @param {module:api/DefaultApi~createRuleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RuleDto}
     */
    createRule(createRuleRequest, callback) {
      let postBody = createRuleRequest;
      // verify the required parameter 'createRuleRequest' is set
      if (createRuleRequest === undefined || createRuleRequest === null) {
        throw new Error("Missing the required parameter 'createRuleRequest' when calling createRule");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = RuleDto;
      return this.apiClient.callApi(
        '/api/v1/rules', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteRule operation.
     * @callback module:api/DefaultApi~deleteRuleCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Удаление правила правила
     * Позволяет удалить существующее правило
     * @param {String} ruleId 
     * @param {module:api/DefaultApi~deleteRuleCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteRule(ruleId, callback) {
      let postBody = null;
      // verify the required parameter 'ruleId' is set
      if (ruleId === undefined || ruleId === null) {
        throw new Error("Missing the required parameter 'ruleId' when calling deleteRule");
      }

      let pathParams = {
        'ruleId': ruleId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1/rules/{ruleId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getApartmentRules operation.
     * @callback module:api/DefaultApi~getApartmentRulesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/RuleDto>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Получение правил по идентификатору квартиры
     * Позволяет получить правила по идентификатору квартиры
     * @param {String} apartmentId 
     * @param {module:api/DefaultApi~getApartmentRulesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/RuleDto>}
     */
    getApartmentRules(apartmentId, callback) {
      let postBody = null;
      // verify the required parameter 'apartmentId' is set
      if (apartmentId === undefined || apartmentId === null) {
        throw new Error("Missing the required parameter 'apartmentId' when calling getApartmentRules");
      }

      let pathParams = {
        'apartmentId': apartmentId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [RuleDto];
      return this.apiClient.callApi(
        '/api/v1/rules/{apartmentId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateRule operation.
     * @callback module:api/DefaultApi~updateRuleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RuleDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Обновление правила
     * Позволяет обновить существующее правило
     * @param {module:model/UpdateRuleRequest} updateRuleRequest 
     * @param {module:api/DefaultApi~updateRuleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RuleDto}
     */
    updateRule(updateRuleRequest, callback) {
      let postBody = updateRuleRequest;
      // verify the required parameter 'updateRuleRequest' is set
      if (updateRuleRequest === undefined || updateRuleRequest === null) {
        throw new Error("Missing the required parameter 'updateRuleRequest' when calling updateRule");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = RuleDto;
      return this.apiClient.callApi(
        '/api/v1/rules', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
