/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The NotificationDto model module.
 * @module model/NotificationDto
 * @version v0
 */
class NotificationDto {
    /**
     * Constructs a new <code>NotificationDto</code>.
     * @alias module:model/NotificationDto
     */
    constructor() { 
        
        NotificationDto.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>NotificationDto</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/NotificationDto} obj Optional instance to populate.
     * @return {module:model/NotificationDto} The populated <code>NotificationDto</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new NotificationDto();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('userId')) {
                obj['userId'] = ApiClient.convertToType(data['userId'], 'String');
            }
            if (data.hasOwnProperty('message')) {
                obj['message'] = ApiClient.convertToType(data['message'], 'String');
            }
            if (data.hasOwnProperty('category')) {
                obj['category'] = ApiClient.convertToType(data['category'], 'String');
            }
            if (data.hasOwnProperty('read')) {
                obj['read'] = ApiClient.convertToType(data['read'], 'Boolean');
            }
            if (data.hasOwnProperty('timestamp')) {
                obj['timestamp'] = ApiClient.convertToType(data['timestamp'], 'Date');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>NotificationDto</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>NotificationDto</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['userId'] && !(typeof data['userId'] === 'string' || data['userId'] instanceof String)) {
            throw new Error("Expected the field `userId` to be a primitive type in the JSON string but got " + data['userId']);
        }
        // ensure the json data is a string
        if (data['message'] && !(typeof data['message'] === 'string' || data['message'] instanceof String)) {
            throw new Error("Expected the field `message` to be a primitive type in the JSON string but got " + data['message']);
        }
        // ensure the json data is a string
        if (data['category'] && !(typeof data['category'] === 'string' || data['category'] instanceof String)) {
            throw new Error("Expected the field `category` to be a primitive type in the JSON string but got " + data['category']);
        }

        return true;
    }


}



/**
 * @member {String} id
 */
NotificationDto.prototype['id'] = undefined;

/**
 * @member {String} userId
 */
NotificationDto.prototype['userId'] = undefined;

/**
 * @member {String} message
 */
NotificationDto.prototype['message'] = undefined;

/**
 * @member {module:model/NotificationDto.CategoryEnum} category
 */
NotificationDto.prototype['category'] = undefined;

/**
 * @member {Boolean} read
 */
NotificationDto.prototype['read'] = undefined;

/**
 * @member {Date} timestamp
 */
NotificationDto.prototype['timestamp'] = undefined;





/**
 * Allowed values for the <code>category</code> property.
 * @enum {String}
 * @readonly
 */
NotificationDto['CategoryEnum'] = {

    /**
     * value: "USER"
     * @const
     */
    "USER": "USER",

    /**
     * value: "TASK"
     * @const
     */
    "TASK": "TASK",

    /**
     * value: "RULE"
     * @const
     */
    "RULE": "RULE",

    /**
     * value: "PENALTY"
     * @const
     */
    "PENALTY": "PENALTY",

    /**
     * value: "FINANCE"
     * @const
     */
    "FINANCE": "FINANCE"
};



export default NotificationDto;

