/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import NotificationDto from '../model/NotificationDto';
import NotificationSettingDto from '../model/NotificationSettingDto';

/**
*  service.
* @module api/DefaultApi
* @version v0
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getNotifications operation.
     * @callback module:api/DefaultApi~getNotificationsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/NotificationDto>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Получение списка уведомлений
     * Позволяет получить список уведомлений
     * @param {module:api/DefaultApi~getNotificationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/NotificationDto>}
     */
    getNotifications(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [NotificationDto];
      return this.apiClient.callApi(
        '/api/v1/notification', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSetting operation.
     * @callback module:api/DefaultApi~getSettingCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NotificationSettingDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/DefaultApi~getSettingCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NotificationSettingDto}
     */
    getSetting(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = NotificationSettingDto;
      return this.apiClient.callApi(
        '/api/v1/notification/setting', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the readNotification operation.
     * @callback module:api/DefaultApi~readNotificationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NotificationDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Обновление статуса уведомления
     * Позволяет обновить статус уведомления
     * @param {String} notificationId 
     * @param {module:api/DefaultApi~readNotificationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NotificationDto}
     */
    readNotification(notificationId, callback) {
      let postBody = null;
      // verify the required parameter 'notificationId' is set
      if (notificationId === undefined || notificationId === null) {
        throw new Error("Missing the required parameter 'notificationId' when calling readNotification");
      }

      let pathParams = {
        'notificationId': notificationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = NotificationDto;
      return this.apiClient.callApi(
        '/api/v1/notification/read/{notificationId}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateSetting operation.
     * @callback module:api/DefaultApi~updateSettingCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NotificationSettingDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/NotificationSettingDto} notificationSettingDto 
     * @param {module:api/DefaultApi~updateSettingCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NotificationSettingDto}
     */
    updateSetting(notificationSettingDto, callback) {
      let postBody = notificationSettingDto;
      // verify the required parameter 'notificationSettingDto' is set
      if (notificationSettingDto === undefined || notificationSettingDto === null) {
        throw new Error("Missing the required parameter 'notificationSettingDto' when calling updateSetting");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = NotificationSettingDto;
      return this.apiClient.callApi(
        '/api/v1/notification/setting/update', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
