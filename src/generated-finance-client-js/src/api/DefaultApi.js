/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreateExpenseRequest from '../model/CreateExpenseRequest';
import DebtDto from '../model/DebtDto';
import ExpensesDto from '../model/ExpensesDto';
import Participant from '../model/Participant';

/**
*  service.
* @module api/DefaultApi
* @version v0
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createExpenses operation.
     * @callback module:api/DefaultApi~createExpensesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ExpensesDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Создание нового расхода
     * Позволяет создать запись о новом расходе.
     * @param {module:model/CreateExpenseRequest} createExpenseRequest 
     * @param {module:api/DefaultApi~createExpensesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ExpensesDto}
     */
    createExpenses(createExpenseRequest, callback) {
      let postBody = createExpenseRequest;
      // verify the required parameter 'createExpenseRequest' is set
      if (createExpenseRequest === undefined || createExpenseRequest === null) {
        throw new Error("Missing the required parameter 'createExpenseRequest' when calling createExpenses");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = ExpensesDto;
      return this.apiClient.callApi(
        '/api/v1/expenses', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDebts operation.
     * @callback module:api/DefaultApi~getDebtsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/DebtDto>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Получение списка долгов
     * Возвращает список долгов пользователей за указанный период времени.
     * @param {String} apartmentId 
     * @param {Number} period 
     * @param {module:api/DefaultApi~getDebtsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/DebtDto>}
     */
    getDebts(apartmentId, period, callback) {
      let postBody = null;
      // verify the required parameter 'apartmentId' is set
      if (apartmentId === undefined || apartmentId === null) {
        throw new Error("Missing the required parameter 'apartmentId' when calling getDebts");
      }
      // verify the required parameter 'period' is set
      if (period === undefined || period === null) {
        throw new Error("Missing the required parameter 'period' when calling getDebts");
      }

      let pathParams = {
        'apartmentId': apartmentId
      };
      let queryParams = {
        'period': period
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [DebtDto];
      return this.apiClient.callApi(
        '/api/v1/finance/debts/{apartmentId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getExpenses operation.
     * @callback module:api/DefaultApi~getExpensesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ExpensesDto>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Получение расходов за указанный период
     * Позволяет получить список всех расходов за указанный период времени.
     * @param {Object} opts Optional parameters
     * @param {Date} [startDate] 
     * @param {Date} [endDate] 
     * @param {module:api/DefaultApi~getExpensesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ExpensesDto>}
     */
    getExpenses(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'startDate': opts['startDate'],
        'endDate': opts['endDate']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [ExpensesDto];
      return this.apiClient.callApi(
        '/api/v1/expenses', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getUserFinances operation.
     * @callback module:api/DefaultApi~getUserFinancesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Participant>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Получение финансов пользователей
     * Возвращает финансовую информацию по пользователям за указанный период времени. Если даты не указаны, возвращаются данные за всё время.
     * @param {String} apartmentId 
     * @param {Number} period 
     * @param {module:api/DefaultApi~getUserFinancesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Participant>}
     */
    getUserFinances(apartmentId, period, callback) {
      let postBody = null;
      // verify the required parameter 'apartmentId' is set
      if (apartmentId === undefined || apartmentId === null) {
        throw new Error("Missing the required parameter 'apartmentId' when calling getUserFinances");
      }
      // verify the required parameter 'period' is set
      if (period === undefined || period === null) {
        throw new Error("Missing the required parameter 'period' when calling getUserFinances");
      }

      let pathParams = {
        'apartmentId': apartmentId
      };
      let queryParams = {
        'period': period
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [Participant];
      return this.apiClient.callApi(
        '/api/v1/finance/{apartmentId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the payDebt operation.
     * @callback module:api/DefaultApi~payDebtCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DebtDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Оплата долга
     * Отмечает долг как оплаченный по его идентификатору.
     * @param {String} debtId 
     * @param {module:api/DefaultApi~payDebtCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DebtDto}
     */
    payDebt(debtId, callback) {
      let postBody = null;
      // verify the required parameter 'debtId' is set
      if (debtId === undefined || debtId === null) {
        throw new Error("Missing the required parameter 'debtId' when calling payDebt");
      }

      let pathParams = {
        'debtId': debtId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = DebtDto;
      return this.apiClient.callApi(
        '/api/v1/finance/debts/{debtId}/pay', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
